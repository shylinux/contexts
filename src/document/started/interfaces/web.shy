title "网页交互"
spark `Contexts 提供了网页接口，所有的软件工具，都可以通过网页来使用。`
spark `在后续的所有文档中，也会使用到本机的 Contexts 服务 <a>http://localhost:9020</a> 来展示一些界面内容。
为了提升文档的展现效果，建议先安装启动 Contexts 服务后，再查看后续文档。`

chapter "启动服务"
spark `通过网页使用 Contexts 前，需要先启动 web 服务器。Contexts 自带了多种启动方式。`

spark `serve 命令直接启动服务。`
shell `./bin/ice.bin serve start`

spark `如果需要进程常驻，可以使用 forever 守护命令。在开发过程中非常有用，每次执行 make 命令进行编译与构建时，都会发送信号自动重启服务进程。
forever 启动守护进程后，才会自动启动服务进程，当服务进程意外停止后，会重新拉起服务。`
shell `./bin/ice.bin forever start`

spark `无论哪种启动方式，默认的服务端口是 9020，打开 <a>http://localhost:9020</a> 即可通过网页使用所有的软件工具。`
spark `服务启动后，会在终端上，启动一个交互式的 shell，可执行任何命令。`

chapter "登录认证"
spark `如果是在容器或远程服务器上启动的服务，访问时都是需要登录认证的。
或是本机启动的服务，但在其它设备上访问此服务，也是需要登录认证的。`
spark `前端网页在检测到没有登录，会展示一个登录页面。可扫码登录，也可以在后台执行命令进行授权登录。
初始用户只能在后台用命令授权登录，复制二维码下面的授权命令，在后台服务启动的 shell 中执行一下，即可授权登录。`

chapter "使用方式"
spark `在 Contexts 中，所有的工具，既可以添加到导航栏里，通过结构化的导航组织起来，也可以通过搜索框被快速查找出来，还可以通过 URL 地址，直接在单独的网页中使用。`

section "导航式"
spark `Contexts 启动后，可直接访问 <a>http://localhost:9020/chat/portal/</a>，即可打开后台管理系统。
后台管理系统导航栏的内容，都是在 src/main.js 文件中定义的。如需自定义导航栏的内容，直接修改此文件即可。
Contexts 也提供了界面添加功能，点击创建后，依次添加群组、添加应用、添加工具，即可动态自动定义导航栏。`
iframe "http://localhost:9020"

section "搜索式"
spark `默认的后台管理系统，会提供一个搜索框，所有的软件工具都可以通过搜索，直接在结果栏中展示，即可实现快速使用此工具。`
iframe "http://localhost:9020?_search=tcp.host"

section "命令式"
spark `所有的软件工具都可以通过 URL 直接访问使用，如工具 web.team.plan 的 URL 是 <a>http://localhost:9020/chat/cmd/web.team.plan</a>。`
spark demo plan
spark `有些软件工具在注册时，会注册一个全局的短名，如 web.team.plan 是全名，plan 就是注册的短名，在使用时，两个完全等价，如在链接地址里
<a>http://localhost:9020/chat/cmd/web.team.plan</a> 与 <a>http://localhost:9020/chat/cmd/plan</a> 是一样的。
需要注意的是，并不是所有的工具在注册时，都会注册短名。只有那些比较基础、比较通用的工具，才需要注册短名。`

chapter "标准界面"
spark `在 Contexts 中，所有的软件工具，都是使用同一前端框架，自动生成的前端界面。如果默认的前端界面，无法满足需求，可以随时编写前端模块，自行定义界面。`
spark `一个标准的工具界面，由标题栏、参数栏、工具栏、工作区、状态栏组成。
有时为了最大的展示工作区，会将标题栏、参数栏、工具栏，放在一行。`
spark demo host

section "标题栏"
spark `标题栏，由工具名与中文名组成。当系统切换成英文版时，会只显示工具名。`
spark `点击标题栏，会打开一个菜单，对工具界面进行更详情的控制，如切换全屏、切换浮动、打开单独的网页、生成共享链接等。`

section "参数栏"
spark `在参数栏中，会有输入框、选择框、按钮等输入控件。这些参数，会在刷新时直接传给后端，从而后端根据这些参数，返回不同的数据，然后刷新工作区。`

section "工具栏"
spark `工具栏与参数很相似，都有一样的输入控件，位置也相邻，都在工作区上面。但区别是，工具栏更偏向于前端交互，不一定会向后端发送请求。但参数栏的交互一般都会发送请求，然后刷新工作区。`

section "状态栏"
spark `状态栏，在工作区下方，由key 和 value 组成，一般都是一些状态信息、统计信息等。`

section "工作区"
spark `工作区，在正中间，占据最大的空间。默认的会以表格的形式展示数据，最后一列一般是当前行的操作按钮。点击表头，会对当前列排序。`
spark `Contexts 的前端框架是 Volcanos，提供了完整的交互与丰富的前端组件。可以在后端代码、或是配置文件中，指定工具界面使用哪个组件展示数据。`
