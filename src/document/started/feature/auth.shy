title "认证授权"
spark `Contexts 有多种认证方式，但就是坚决不支持密码，因为密码是非常不安全，且会给用户添加很多负担。`

chapter "自动认证"
spark `服务启动时，会自动获取本机的用户名，来作为根用户，从本机发出的所有请求都会默认使用此用户，拥有所有操作的权限。
所以在浏览器直接访问 <a>http://localhost:9020</a> 是不需要认证的，会自动登录。`
spark `但如果机器是共享机器，和其他用户共享的，就需要关闭自动认证。
在启动脚本 <code>./etc/init.shy</code> 或 <code>./etc/local.shy</code> 中，添加如下两行代码，禁用自动认证。`
spark inner `
~web
	serve domain ""
` args "etc/local.shy"

chapter "授权认证"
spark `当访问其它机器上的 Contexts 服务时，就需要登录认证。`
order `
如果在手机上已经登录，直接扫码即可授权电脑登录。
如果可以访问到后台服务的 shell，直接执行授权命令即可。
如果是新用户，则需要老用户发送邀请链接，获取登录权限。
如果是公开平台，则会提供用户注册的功能。
`

section "扫码登录"
spark `当网页被打开时，如果没有登录，则会展示登录界面，目前只支持扫码登录和命令授权登录。用已经登录的手机，扫描二维码，即可授权登录。`

section "授权登录"
spark `后台可以执行授权命令，授权网页登录，在登录界面会生成一个授权命令，复制后，在后台执行一下即可。`

section "邀请登录"
spark `Contexts 提供了发送邮件的功能，老用户可以发送邀请链接，邀请新用户使用此设备。`
spark `aaa.offer 命令是发送邀请的工具。点创建，指定用户邮箱和邀请主题，发送即可。`
spark `<a>http://localhost:9020/chat/cmd/offer</a>`

section "用户注册"
spark `详情请见 Contexts 搭建的一些公开平台，提供的注册方式。`

chapter "认证中心"
spark `如果服务启动时，连接了远程服务，远程服务节点会自动成为认证中心。
当其他用户访问本机的服务时，如果没有登录，则会自动跳转到远程服务的网页中进行认证，认证成功后，再将用户信息带回来，从而自动登录本机。
所以，在一个集群中的所有设备，只要有一台设备存储用户信息，其它所有设备，都可以实现自动登录。
`
section `远程权限`
spark `远程服务器上的用户，访问本机服务时，默认会使用远程服务器上权限。
如果远程服务器是不可信的，可以在启动脚本中配置远程用户的权限，从而将安全风险降低。`
