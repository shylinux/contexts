title "代码库与代码源"
spark `Contexts 为了实现功能的完备，代码库和代码源当然是必不可少的功能。其中代码库是指 Git-Client，代码源是指 Git-Server。`
spark `Contexts 在服务节点启动时，默认的就已经启动了 Git-Server 的服务，支持代码源的创建、上传、下载等功能。
所以 Contexts 的所有代码，都是存放在 Contexts 启动的服务器上。如前端框架 <a>https://shylinux.com/x/volcanos.git</a>，后端框架 <a>https://shylinux.com/x/icebergs.git</a>。`

chapter "代码源管理"
spark demo web.code.git.service
section "代码源目录"
spark `Contexts 的代码源，都保存在 ./usr/local/repos/ 目录下。`

section "代码源权限"
spark `默认的下载代码是不需要权限，所有人都可以下载代码。
但上传代码需要权限的，需要用 web.code.git.token 生成令牌，并保存到客户端的本地。`

section "代码源地址"
spark `当服务节点启动后，就可以通过 <a>http://localhost:9020/x/demo</a> 来上传下载代码了，demo 可以替换成任意的项目名。`
shell `
mkdir demo; cd demo
git init
git remote add origin http://localhost:9020/x/demo
git add README.md
git commit -am "add init"
git push
`

chapter "代码库管理"
spark `代码库管理，除了可以管理当前项目的代码库，还可以用来管理依赖库的代码。如 Contexts 项目，就用到了几个依赖库。`
spark demo web.code.git.repos

section "下载代码"
spark `点击工具栏中的下载按键，即可批量下载，将所有的代码库都下载一遍。`

section "上传代码"
spark `点击工具栏中的上传按键，即可批量上传，将所有的代码库都上传一遍。`

section "代码状态"
spark `点击工具栏中的状态按键，即可遍历所有的代码库，汇总出来所有的文件变更状态，输出的界面上。这样就可以在一个界面上，同时看到所有代码库的变更。`
spark `在输出的变更信息表中，最后一列是操作按键，根据当前行的文件状态，显示不同的按键。如未知文件，会显示添加按键和删除按键，如更新的文件，会显示添加按键。`

chapter "代码库状态"
spark `web.code.git.repos 更偏向于项目列表和批量操作。为了更加方便的添加代码、提交代码，又实现了一个新的工具 web.code.git.status。`
spark demo web.code.git.status

section "代码权限"
spark `在工具栏有一个授权按键，如果当前项目的代码源也是 Contexts 启动的服务，就可以实现一键授权，从 Contexts 的代码源服务器上生成 token 并保存到本地。`